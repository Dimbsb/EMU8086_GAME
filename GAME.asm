DATA SEGMENT
    COUNTER DW 0                    ; Counter for loops in PAINT and BLACK
    POSSIBLE_POSITIONS DW 9 DUP(?)   ; Array to store the positions of the rectangles
    PAUSED DW 0                      ; Variable to track pause state
    SEED DW ?                        ; Initial seed for the PRNG (pseudo-random number generator)
    DEBUG_OUTPUT DW ?                ; For debugging: Store random value generated by rnd16 proc
DATA ENDS

CODE SEGMENT
START:
      MOV AX,DATA
      MOV DS,AX   
      MOV ES,AX

      ; Initialize the seed using the system timer to ensure randomness
      MOV AH, 0
      INT 1Ah           ; Get system time (timer tick count in CX:DX)
      MOV seed, DX      ; Use DX (lower 16 bits of timer) as the initial seed value

      CALL SETGRAPHICSMODE 
      CALL CREATEBORDERS 
      CALL POSITIONS 

      MOV AH,4Ch
      INT 21h
          
SETGRAPHICSMODE PROC
      PUSH AX
      MOV AH, 0h
      MOV AL, 13h        ; Set video mode 13h (320x200, 256 colors)
      INT 10h
      POP AX     
      RET
SETGRAPHICSMODE ENDP 

CREATEBORDERS PROC
    PUSHA 
    MOV BX, 0A000h       ; Set ES to the video memory segment
    MOV ES, BX  
             
    ; Draw horizontal borders (320 pixels width)
    MOV CX, 320
    MOV DI, 0
HORIZONTAL:           
        MOV ES:[DI], 13          ; Top border, color 13 (light magenta)
        INC DI        
        MOV ES:[DI + 21120], 13  ; Middle border (row 66)
        MOV ES:[DI + 42240], 13  ; Middle border (row 133)
        MOV ES:[DI + 63680], 13  ; Bottom border (row 199)
        LOOP HORIZONTAL  
    
    ; Draw vertical borders (200 pixels height)
    MOV CX, 200
    MOV DI, 0 
VERTICAL:
        MOV ES:[DI], 13          ; Left border, color 13 (light magenta)
        MOV ES:[DI + 106], 13    ; Vertical line at position 106
        MOV ES:[DI + 212], 13    ; Vertical line at position 212
        MOV ES:[DI + 319], 13    ; Right border, last column
        ADD DI, 320
        LOOP VERTICAL     
        
    POPA
    RET
CREATEBORDERS ENDP    
               
POSITIONS PROC
    PUSHA
    
    ; Initialize possible positions for painting
    MOV WORD PTR [POSSIBLE_POSITIONS+0], 1*320  
    MOV WORD PTR [POSSIBLE_POSITIONS+2], 1*320 + 106
    MOV WORD PTR [POSSIBLE_POSITIONS+4], 1*320 + 212 
    MOV WORD PTR [POSSIBLE_POSITIONS+6], 67*320 
    MOV WORD PTR [POSSIBLE_POSITIONS+8], 67*320 + 106
    MOV WORD PTR [POSSIBLE_POSITIONS+10], 67*320 + 212
    MOV WORD PTR [POSSIBLE_POSITIONS+12], 133*320 
    MOV WORD PTR [POSSIBLE_POSITIONS+14], 133*320 + 106
    MOV WORD PTR [POSSIBLE_POSITIONS+16], 133*320 + 212 

BLINK_LOOP:
    ; Call random number generator to get a random number between 0 and 8
    CALL rnd16
    MOV DX, 0
    MOV CX, 9
    DIV CX
    MOV AX, DX

    ; Debug: Store the random value in memory for verification
    MOV [DEBUG_OUTPUT], AX

    ; Multiply AX by 2 to get the correct offset in the POSSIBLE_POSITIONS array
    SHL AX, 1
    MOV SI, AX

    ; Get the position based on the random index
    MOV DI, WORD PTR [POSSIBLE_POSITIONS + SI]

    ; Paint the random position
    CALL PAINT

    ; Delay 2 seconds
    MOV CX, 0FH
    MOV DX, 4240H
    MOV AH, 86H
    INT 15H

    ; Paint the same rectangle black to "blink" it
    CALL BLACK

    ; Check for key press
    MOV AH, 01h
    INT 16h
    JZ BLINK_LOOP  ; If no key pressed, continue blinking

    ; Key pressed, check which key
    MOV AH, 00h
    INT 16h
    CMP AL, 'q'
    JE EXIT_LOOP
    CMP AL, ' '  ; Check for spacebar
    JNE BLINK_LOOP
    
    ; Toggle pause state
    XOR WORD PTR [PAUSED], 1

    ; Pause loop
PAUSE_LOOP:
    MOV AH, 01h
    INT 16h
    JZ PAUSE_LOOP  ; Wait for key press
    MOV AH, 00h
    INT 16h
    CMP AL, ' '
    JNE PAUSE_LOOP  ; If not spacebar, stay in pause loop

    ; Toggle pause state back and resume
    XOR WORD PTR [PAUSED], 1

    JMP BLINK_LOOP

EXIT_LOOP:
    POPA
    RET
POSITIONS ENDP
                          
PAINT PROC
    PUSHA

    ; Call the random number generator to get a random color in AX
    CALL rnd16
    MOV AL, AH   ; Use higher byte of AX as the random color (values range 0-255)

    MOV CX, 105  ; Number of horizontal steps (approximate width of the rectangle)
ALLCOLOR:
    INC DI       ; Move to next pixel in the row
    MOV BX, DI   ; Set BX to the current pixel location
    MOV COUNTER, 1

COUNTER_LOOP_COLOR:
    MOV ES:[BX], AL  ; Use the random color in AL
    ADD BX, 320      ; Move to the next row (320 pixels down)

    INC COUNTER
    CMP COUNTER, 66  ; Draw 66 pixels vertically (height of the rectangle)
    JL COUNTER_LOOP_COLOR

    LOOP ALLCOLOR  
    
    POPA
    RET
PAINT ENDP  

rnd16 proc
    mov ax, seed      ; Load the current seed
    mov dx, 8403h     ; Multiplier
    mul dx            ; Multiply seed by multiplier
    inc ax            ; Add increment (1)
    mov seed, ax      ; Store the new seed
    ret
rnd16 endp

BLACK PROC
    PUSHA
    
    MOV CX, 105  ; Number of horizontal steps (approximate width of the rectangle)
ALLBLACK:
    INC DI       ; Move to next pixel in the row
    MOV BX, DI   ; Set BX to the current pixel location
    MOV COUNTER, 1

COUNTER_LOOP_BLACK:
    MOV ES:[BX], 00  ; Set the pixel to black
    ADD BX, 320      ; Move to the next row (320 pixels down)

    INC COUNTER
    CMP COUNTER, 66  ; Draw 66 pixels vertically (height of the rectangle)
    JL COUNTER_LOOP_BLACK

    LOOP ALLBLACK
    
    POPA
    RET
BLACK ENDP

CODE ENDS  

STACK SEGMENT
    DW 128 dup(0)
STACK ENDS

END START
